// 1. Import the header generated by Codegen from your JS spec.
#import "RNRenderHTMLSpecs.h"
#import <React/RCTBridgeModule.h>
#import <React/RCTEventEmitter.h>

// 2. IMPORTANT: Import the auto-generated Swift header.
#import "rn_ios_app-Swift.h"

// The interface name must match the module name from the spec.
// It inherits from RCTEventEmitter and the Codegen-generated protocol `NativePostsFetcherSpec`.
@interface PostsFetcher : RCTEventEmitter <NativePostsFetcherSpec>
@end

@implementation PostsFetcher {
  // 3. Keep an instance of your Swift class.
  PostsFetcherImpl *swiftPostsFetcherImpl;
}

// This is the standard TurboModule entry point.
// It creates and returns the JSI binding for the module.
- (std::shared_ptr<facebook::react::TurboModule>)getTurboModule:
    (const facebook::react::ObjCTurboModule::InitParams &)params {
  return std::make_shared<facebook::react::NativePostsFetcherSpecJSI>(params);
}

// The initializer for this Objective-C++ class.
- (instancetype)init {
  self = [super init];
  if (self) {
    // 4. Create an instance of your Swift class when the module is initialized.
    swiftPostsFetcherImpl = [[PostsFetcherImpl alloc] init];
  }
  return self;
}

#pragma mark - NativePostsFetcherSpec Methods

// 5. Implement the methods from the spec by forwarding the calls to your Swift instance.
// The method signatures here are defined by the Codegen-generated `NativePostsFetcherSpec.h` file.

- (void)fetchWindow:(NSString *)baseUrl
            topicId:(NSString *)topicId
         postNumber:(NSString *)postNumber
            resolve:(RCTPromiseResolveBlock)resolve
             reject:(RCTPromiseRejectBlock)reject {
  [swiftPostsFetcherImpl fetchWindow:baseUrl topicId:topicId postNumber:postNumber resolver:resolve rejecter:reject];
}

- (void)fetchNext:(NSString *)baseUrl
          topicId:(NSString *)topicId
   lastPostNumber:(NSString *)lastPostNumber
          resolve:(RCTPromiseResolveBlock)resolve
           reject:(RCTPromiseRejectBlock)reject {
  [swiftPostsFetcherImpl fetchNext:baseUrl topicId:topicId lastPostNumber:lastPostNumber resolver:resolve rejecter:reject];
}

- (void)fetchPrev:(NSString *)baseUrl
          topicId:(NSString *)topicId
  firstPostNumber:(NSString *)firstPostNumber
          resolve:(RCTPromiseResolveBlock)resolve
           reject:(RCTPromiseRejectBlock)reject {
  [swiftPostsFetcherImpl fetchPrev:baseUrl topicId:topicId firstPostNumber:firstPostNumber resolver:resolve rejecter:reject];
}

// You still need to tell React Native the module name.
// This must match the name from the JS spec.
+ (NSString *)moduleName {
  return @"PostsFetcher";
}

// If your module doesn't send events, you can return an empty array.
- (NSArray<NSString *> *)supportedEvents {
  return @[];
}

// This ensures the module is initialized on the main thread.
+ (BOOL)requiresMainQueueSetup {
  return YES;
}

@end
